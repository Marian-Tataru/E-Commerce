
services:

  # ecommerce api services
  api_db:
    image: postgres
    restart: unless-stopped
    env_file: ./.env
    environment:
      - POSTGRES_USER=${API_DB_USER}
      - POSTGRES_PASSWORD=${API_DB_PASS}
      - POSTGRES_DB=${API_DB_NAME}
      - PGPORT=${API_DB_PORT_DOCKER}
    ports:
      - ${API_DB_PORT_HOST}:${API_DB_PORT_DOCKER}
    volumes:
      - api_db:/var/lib/postgresql/data
    networks:
      - keycloak_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${API_DB_USER} -d ${API_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  api_backend:
    depends_on:
      - api_db
    build: ./backend
    restart: on-failure
    env_file: ./.env
    ports:
      - ${SPRING_PORT_HOST}:${SPRING_PORT_DOCKER}
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.datasource.url"  : "jdbc:postgresql://api_db:${API_DB_PORT_DOCKER}/${API_DB_NAME}",
        "spring.datasource.username" : "$API_DB_USER",
        "spring.datasource.password" : "$API_DB_PASS",
        "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.PostgreSQLDialect",
        "spring.jpa.hibernate.ddl-auto" : "update"
      }'
    networks:
      - keycloak_network
    stdin_open: true
    tty: true

  #  keycloack services 
  kc_db:
    image: postgres
    restart: unless-stopped
    env_file: ./.env
    environment:
      - POSTGRES_USER=${KC_DB_USER}
      - POSTGRES_PASSWORD=${KC_DB_PASS}
      - POSTGRES_DB=${KC_DB_NAME}
      - PGPORT=${KC_DB_PORT_DOCKER}
    ports:
      - ${KC_DB_PORT_HOST}:${KC_DB_PORT_DOCKER}
    volumes:
      - kc_db:/var/lib/postgresql/data
    networks:
      - keycloak_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${KC_DB_USER} -d ${KC_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    stdin_open: true
    tty: true

  keycloak:
      image: quay.io/keycloak/keycloak:23.0.6
      command: start
      environment:
        KC_HOSTNAME: ${KC_HOST_NAME}
        KC_HOSTNAME_PORT: ${KC_PORT_HOST}
        KC_HOSTNAME_STRICT_BACKCHANNEL: false
        KC_HTTP_ENABLED: true
        KC_HOSTNAME_STRICT_HTTPS: false
        KC_HEALTH_ENABLED: true
        KEYCLOAK_ADMIN: ${KC_ADMIN}
        KEYCLOAK_ADMIN_PASSWORD: ${KC_ADMIN_PASSWORD}
        KC_DB: postgres
        KC_DB_URL: jdbc:postgresql://kc_db:${KC_DB_PORT_DOCKER}/${KC_DB_NAME}
        KC_DB_USERNAME: ${KC_DB_USER}
        KC_DB_PASSWORD: ${KC_DB_PASS}
      ports:
        - ${KC_PORT_HOST}:${KC_PORT_DOCKER}  
      depends_on:
        kc_db:
          condition: service_healthy  
      networks:
        - keycloak_network
      volumes:
        - keycloak:/opt/keycloak/data
        - ./keycloak/imports:/opt/keycloak/data/import #load custom configuration at startup
      stdin_open: true
      tty: true


volumes:
  api_db:
  kc_db:
  keycloak:

networks:
  keycloak_network:
    driver: bridge
